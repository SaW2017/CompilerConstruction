/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package yapl.compiler;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Parser parser;

  public Token getToken() {
    return token;
  }

  public void setToken(Token token) {
    this.token = token;
  }

  public Token token;

  protected String programName;
  protected String name;
  protected String ident;
  protected int kind;
  protected boolean isBoolean = false;
  protected boolean isInteger = false;
  protected boolean booleanValue = false;
  protected int integerValue = 0;

  public boolean getBooleanValue() {
    return booleanValue;
  }

  public void setBooleanValue(boolean booleanValue) {
    this.booleanValue = booleanValue;
  }

  public int getIntegerValue() {
    return integerValue;
  }

  public void setIntegerValue(int integerValue) {
    this.integerValue = integerValue;
  }

  public boolean isBoolean() {
    return isBoolean;
  }

  public void setBoolean(boolean aBoolean) {
    isBoolean = aBoolean;
  }

  public boolean isInteger() {
    return isInteger;
  }

  public void setInteger(boolean integer) {
    isInteger = integer;
  }

  public String getProgramName() {
    return programName;
  }

  public String getName() {
    return name;
  }

  public String getIdent() {
    return ident;
  }

  public int getKind() {
    return kind;
  }

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    return ParserTreeConstants.jjtNodeName[id];
  }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }

  public void setProgramName(String name){
    programName = name;
  }

  public void setName(String name){
    this.name = name;
  }

  public void setIdent(String ident){
    this.ident = ident;
  }

  public void setKind(int kind){
    this.kind = kind;
  }
}

/* JavaCC - OriginalChecksum=1d1cb2eaa9fa8869e66ce5e00d9a6cf7 (do not edit this line) */
