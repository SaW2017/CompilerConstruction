/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package yapl.compiler;
//import yapl.lib.*;
import yapl.interfaces.*;


public class Parser implements ParserConstants {

  static final public Token RelOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 6:{
      t = jj_consume_token(6);
      break;
      }
    case 7:{
      t = jj_consume_token(7);
      break;
      }
    case 8:{
      t = jj_consume_token(8);
      break;
      }
    case 9:{
      t = jj_consume_token(9);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Token EqualOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 10:{
      t = jj_consume_token(10);
      break;
      }
    case 11:{
      t = jj_consume_token(11);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Token AddOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:{
      t = jj_consume_token(12);
      break;
      }
    case 13:{
      t = jj_consume_token(13);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Token MulOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 14:{
      t = jj_consume_token(14);
      break;
      }
    case 15:{
      t = jj_consume_token(15);
      break;
      }
    case 16:{
      t = jj_consume_token(16);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jjtThis.jjtSetFirstToken(t);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public void Literal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:
    case 18:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 17:{
        jj_consume_token(17);
jjtThis.intValue = 1; jjtThis.type = new BoolType();
        break;
        }
      case 18:{
        jj_consume_token(18);
jjtThis.intValue = 0; jjtThis.type = new BoolType();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case number:{
      t = jj_consume_token(number);
jjtThis.intValue = Integer.parseInt(t.image); jjtThis.type = new IntType();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Selector() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:{
      jj_consume_token(19);
      Expr();
      jj_consume_token(20);
      break;
      }
    case 21:{
      jj_consume_token(21);
      t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(2);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 21:{
      Selector();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
}

  static final public void ArrayLen() throws ParseException {Token t;
    jj_consume_token(22);
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 21:{
      Selector();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

  static final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:
    case 18:
    case number:{
      Literal();
      break;
      }
    case 23:{
      jj_consume_token(23);
      Expr();
      jj_consume_token(24);
      break;
      }
    case ident:{
      B();
      break;
      }
    case 22:{
      ArrayLen();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void UnaryExpr() throws ParseException {Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:
    case 13:{
      t = AddOp();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    PrimaryExpr();
jjtThis.jjtSetFirstToken(t);
}

  static final public void MulExpr() throws ParseException {Token t=null;
    UnaryExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 14:
      case 15:
      case 16:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_1;
      }
      t = MulOp();
      UnaryExpr();
    }
jjtThis.jjtSetFirstToken(t);
}

  static final public void AddExpr() throws ParseException {Token t=null;
    MulExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:
      case 13:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      t = AddOp();
      MulExpr();
    }
jjtThis.jjtSetFirstToken(t);
}

  static final public void RelExpr() throws ParseException {Token t=null;
    AddExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 6:
    case 7:
    case 8:
    case 9:{
      t = RelOp();
      AddExpr();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
jjtThis.jjtSetFirstToken(t);
}

  static final public void EqualExpr() throws ParseException {Token t=null;
    RelExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 10:
    case 11:{
      t = EqualOp();
      RelExpr();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
jjtThis.jjtSetFirstToken(t);
}

  static final public void CondAndExpr() throws ParseException {Token t=null;
    EqualExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 25:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(25);
      EqualExpr();
    }
jjtThis.jjtSetFirstToken(t);
}

  static final public void CreationExpr() throws ParseException {Token t=null;
    jj_consume_token(26);
    NonArrayType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(19);
      Expr();
      jj_consume_token(20);
jjtThis.tokens.add(t);
    }
}

  static final public void Expr() throws ParseException {Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:
    case 13:
    case 17:
    case 18:
    case 22:
    case 23:
    case ident:
    case number:{
      CondAndExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 27:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(27);
jjtThis.jjtSetFirstToken(t);
        CondAndExpr();
      }
      break;
      }
    case 26:{
      CreationExpr();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void ArgumentList() throws ParseException {
    Expr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 28:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(28);
      Expr();
    }
}

  static final public void ProcedureCall() throws ParseException {
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:
    case 13:
    case 17:
    case 18:
    case 22:
    case 23:
    case 26:
    case ident:
    case number:{
      ArgumentList();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(24);
}

  static final public void Assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 21:{
      Selector();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(29);
    Expr();
}

  static final public void IfStatement() throws ParseException {
    jj_consume_token(30);
    Expr();
    jj_consume_token(31);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      jj_consume_token(32);
      StatementList();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(33);
}

  static final public void WhileStatement() throws ParseException {
    jj_consume_token(34);
    Expr();
    jj_consume_token(35);
    StatementList();
    jj_consume_token(36);
}

  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(37);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:
    case 13:
    case 17:
    case 18:
    case 22:
    case 23:
    case 26:
    case ident:
    case number:{
      Expr();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
}

  static final public void WriteStatement() throws ParseException {Token t;
    jj_consume_token(38);
    t = jj_consume_token(string);
}

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 30:{
      IfStatement();
      break;
      }
    case 34:{
      WhileStatement();
      break;
      }
    case 37:{
      ReturnStatement();
      break;
      }
    case 38:{
      WriteStatement();
      break;
      }
    case ident:{
      A();
      break;
      }
    case 40:
    case 49:{
      Block();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void StatementList() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:
      case 34:
      case 37:
      case 38:
      case 40:
      case 49:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      Statement();
      jj_consume_token(39);
    }
}

  static final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:{
      Decl();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(40);
    StatementList();
    jj_consume_token(41);
}

  static final public void NonArrayType() throws ParseException {Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      break;
      }
    case 43:{
      jj_consume_token(43);
      break;
      }
    case ident:{
      t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(4);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Type() throws ParseException {Token t=null;
    NonArrayType();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(19);
      jj_consume_token(20);
jjtThis.tokens.add(t);
    }
}

  static final public void ReturnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
jjtThis.type = new VoidType();
      break;
      }
    case 42:
    case 43:
    case ident:{
      Type();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void ConstDecl() throws ParseException {Token t;
    jj_consume_token(45);
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(3);
    jj_consume_token(46);
    Literal();
    jj_consume_token(39);
}

  static final public void VarDeclChild() throws ParseException {Token t;
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image);jjtThis.setKind(6);
}

  static final public void VarDecl() throws ParseException {Token t;
    Type();
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(6); jjtThis.setName(t.image);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 28:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      jj_consume_token(28);
      VarDeclChild();
    }
    jj_consume_token(39);
}

  static final public void TypeDecl() throws ParseException {Token t;
    jj_consume_token(47);
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image);jjtThis.setKind(4);
    VarDecl();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 42:
      case 43:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      VarDecl();
    }
    jj_consume_token(48);
    jj_consume_token(39);
}

  static final public void Decl() throws ParseException {
    jj_consume_token(49);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 42:
      case 43:
      case 45:
      case 47:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        ConstDecl();
        break;
        }
      case 42:
      case 43:
      case ident:{
        VarDecl();
        break;
        }
      case 47:{
        TypeDecl();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void FormalParam() throws ParseException {Token t;
    Type();
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image);jjtThis.setKind(6);
}

  static final public void FormalParamList() throws ParseException {
    FormalParam();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 28:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_12;
      }
      jj_consume_token(28);
      FormalParam();
    }
}

  static final public void Procedure() throws ParseException {Token t;
    jj_consume_token(50);
    ReturnType();
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setKind(1); jjtThis.setName(t.image);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:
    case 43:
    case ident:{
      FormalParamList();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(24);
    Block();
    ProcedureEnd(t.image);
}

  static final public ASTProcedureEnd ProcedureEnd(String procedureName) throws ParseException {Token t;
    t = jj_consume_token(ident);
jjtThis.setName(t.image); jjtThis.setProcedureName(procedureName);
    jj_consume_token(39);
{if ("" != null) return jjtThis;}
    throw new Error("Missing return statement in function");
}

  static final public ASTProgram Program() throws ParseException {Token t;
    jj_consume_token(51);
    t = jj_consume_token(ident);
jjtThis.setName(t.image);  jjtThis.setIdent(t.image); jjtThis.setKind(0);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        Decl();
        break;
        }
      case 50:{
        Procedure();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(40);
    StatementList();
    jj_consume_token(41);
    End(t.image);
{if ("" != null) return jjtThis;}
    throw new Error("Missing return statement in function");
}

  static final public ASTEnd End(String program) throws ParseException {Token t;
    t = jj_consume_token(ident);
jjtThis.setName(t.image); jjtThis.setProgramName(program);
    jj_consume_token(21);
    jj_consume_token(0);
{if ("" != null) return jjtThis;}
    throw new Error("Missing return statement in function");
}

  static final public void A() throws ParseException {Token t;
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setName(t.image); jjtThis.setKind(3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 21:
    case 29:{
      Assignment();
      break;
      }
    case 23:{
      ProcedureCall();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void B() throws ParseException {Token t;
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image); jjtThis.setName(t.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      ProcedureCall();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:
      case 21:{
        Selector();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    }
}

  static final public ASTPredefinedProcedures PredefinedProcedures() throws ParseException, YAPLException {
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      ProcedureHead();
    }
    jj_consume_token(0);
{if ("" != null) return jjtThis;}
    throw new Error("Missing return statement in function");
}

  static final public void ProcedureHead() throws ParseException {Token t;
    jj_consume_token(50);
    ReturnType();
    t = jj_consume_token(ident);
jjtThis.setIdent(t.image);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:
    case 43:
    case ident:{
      FormalParamList();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(24);
    jj_consume_token(39);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3c0,0xc00,0x3000,0x1c000,0x60000,0x60000,0x280000,0x280000,0x280000,0xc60000,0x3000,0x1c000,0x3000,0x3c0,0xc00,0x2000000,0x80000,0x8000000,0x4c63000,0x10000000,0x4c63000,0x280000,0x0,0x4c63000,0x40000000,0x40000000,0x0,0x0,0x80000,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x20a80000,0x280000,0x800000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x300000,0x0,0x1,0x300000,0x120164,0x120164,0x20000,0x100c00,0x0,0x101c00,0x0,0x100c00,0x10ac00,0x10ac00,0x0,0x100c00,0x60000,0x60000,0x0,0x0,0x0,0x40000,0x100c00,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[58];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 43; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 58; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
