/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package yapl.compiler;
import yapl.Symboltable;
import yapl.interfaces.CompilerError;
import yapl.interfaces.Symbol;
import yapl.lib.CompilerMessage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import yapl.SymbolChecker;

/** CA3 */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();
    private static String programName = "";
    private static Symboltable st = new Symboltable();

  /** Main entry point. */
  public static void main(String args[]) {
    //https://www.cs.purdue.edu/homes/hosking/javacc/doc/JJTree.html
        if(args.length < 1){
            System.out.println("Not enough arguments! Please enter file path.");
            return;
        }
        try{
            Parser parser = new Parser(new FileInputStream(args[0]));
            ASTProgram astProgramRoot = null;
            astProgramRoot = parser.Program();
            astProgramRoot.dump("AST: ");

            /*
            System.out.println("--> " + astProgramRoot.getProgramName());
            System.out.println("--->" + astProgramRoot.jjtGetNumChildren());
            for(int i = 0 ; i < astProgramRoot.jjtGetNumChildren(); i++){
                System.out.println("C -> " + ((SimpleNode)astProgramRoot.jjtGetChild(i)).getProgramName());


            }*/

            new SymbolChecker().check(astProgramRoot);

            CompilerMessage.printOK(programName);
        } catch (ParseException e) {
            CompilerMessage.printError(e, programName);
        } catch(TokenMgrError e) {
            CompilerMessage.printError(e, programName);
        } catch(Exception e){
            e.printStackTrace();
        }


   }

  static final public ASTProgram Program() throws ParseException {/*@bgen(jjtree) Program */
        ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(6);
      t = jj_consume_token(ident);
jjtn000.setName(t.image);  jjtn000.setIdent(t.image); jjtn000.setKind(Symbol.Program);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        if (jj_2_2(2)) {
          Decl();
        } else if (jj_2_3(2)) {
          Procedure();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(7);
      StatementList();
      jj_consume_token(8);
      End(t.image);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTEnd End(String programName) throws ParseException {/*@bgen(jjtree) End */
    ASTEnd jjtn000 = new ASTEnd(JJTEND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ident);
jjtn000.setName(t.image); jjtn000.setProgramName(programName);
      jj_consume_token(9);
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

//Decls
  static final public void Decl() throws ParseException {/*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
        if (jj_2_5(2)) {
          ConstDecl();
        } else if (jj_2_6(2)) {
          VarDecl();
        } else if (jj_2_7(2)) {
          TypeDecl();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ConstDecl() throws ParseException {/*@bgen(jjtree) ConstDecl */
 ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(11);
      t = jj_consume_token(ident);
      jj_consume_token(12);
      Literal();
      jj_consume_token(13);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdent(t.image);
        jjtn000.setKind(Symbol.Constant);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void VarDecl() throws ParseException {/*@bgen(jjtree) VarDecl */
 ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(ident);
jjtn000.setIdent(t.image); jjtn000.setKind(Symbol.Variable);
      label_3:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(14);
        t = jj_consume_token(ident);
jjtn000.setIdent(t.image); jjtn000.setKind(Symbol.Variable);
      }
      jj_consume_token(13);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void TypeDecl() throws ParseException {/*@bgen(jjtree) TypeDecl */
  ASTTypeDecl jjtn000 = new ASTTypeDecl(JJTTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(15);
      jj_consume_token(ident);
      VarDecl();
      label_4:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_4;
        }
        VarDecl();
      }
      jj_consume_token(16);
      jj_consume_token(13);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//________________END OF DECs___________

//________________TYPEs_____________
  static final public 
void NonArrayType() throws ParseException {/*@bgen(jjtree) NonArrayType */
  ASTNonArrayType jjtn000 = new ASTNonArrayType(JJTNONARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        jj_consume_token(17);
      } else if (jj_2_11(2)) {
        jj_consume_token(18);
      } else if (jj_2_12(2)) {
        jj_consume_token(ident);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NonArrayType();
      label_5:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(19);
        jj_consume_token(20);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ReturnType() throws ParseException {/*@bgen(jjtree) ReturnType */
  ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        jj_consume_token(21);
      } else if (jj_2_15(2)) {
        Type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//________________END OF TYPEs________

//________________PROCEDUREs__________
  static final public void Procedure() throws ParseException {/*@bgen(jjtree) Procedure */
 ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(22);
      ReturnType();
      t = jj_consume_token(ident);
jjtn000.setIdent(t.image);
      jj_consume_token(23);
      if (jj_2_16(2)) {
        FormalParamList();
      } else {
        ;
      }
      jj_consume_token(24);
      Block();
      jj_consume_token(ident);
      jj_consume_token(13);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void FormalParamList() throws ParseException {/*@bgen(jjtree) FormalParamList */
  ASTFormalParamList jjtn000 = new ASTFormalParamList(JJTFORMALPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FormalParam();
      label_6:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(14);
        FormalParam();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void FormalParam() throws ParseException {/*@bgen(jjtree) FormalParam */
 ASTFormalParam jjtn000 = new ASTFormalParam(JJTFORMALPARAM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(ident);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdent(t.image);
    jjtn000.setKind(Symbol.Parameter);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//________________END OF PROCEDUREs____

//________________STATEMENTs___________
  static final public 
void StatementList() throws ParseException {/*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_7;
        }
        Statement();
        jj_consume_token(13);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2)) {
        IfStatement();
      } else if (jj_2_20(2)) {
        WhileStatement();
      } else if (jj_2_21(2)) {
        ReturnStatement();
      } else if (jj_2_22(2)) {
        WriteStatement();
      } else if (jj_2_23(2)) {
        Assignment();
      } else if (jj_2_24(2)) {
        ProcedureCall();
      } else if (jj_2_25(2)) {
        Block();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void WriteStatement() throws ParseException {/*@bgen(jjtree) WriteStatement */
  ASTWriteStatement jjtn000 = new ASTWriteStatement(JJTWRITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      jj_consume_token(string);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(26);
      if (jj_2_26(2)) {
        Expr();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(27);
      Expr();
      jj_consume_token(28);
      StatementList();
      jj_consume_token(29);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(30);
      Expr();
      jj_consume_token(31);
      StatementList();
      if (jj_2_27(2)) {
        jj_consume_token(32);
        StatementList();
      } else {
        ;
      }
      jj_consume_token(33);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ident);
      if (jj_2_28(2)) {
        Selector();
      } else {
        ;
      }
      jj_consume_token(34);
      Expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ProcedureCall() throws ParseException {/*@bgen(jjtree) ProcedureCall */
  ASTProcedureCall jjtn000 = new ASTProcedureCall(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ident);
      jj_consume_token(23);
      if (jj_2_29(2)) {
        ArgumentList();
      } else {
        ;
      }
      jj_consume_token(24);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
      label_8:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(14);
        Expr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_31(2)) {
        Decl();
      } else {
        ;
      }
      jj_consume_token(7);
      StatementList();
      jj_consume_token(8);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//________________END OF STATEMENTs_____

//_______________EXPRESSIONs________
  static final public 
void Expr() throws ParseException {/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_33(2)) {
        CondAndExpr();
        label_9:
        while (true) {
          if (jj_2_32(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(35);
          CondAndExpr();
        }
      } else if (jj_2_34(2)) {
        CreationExpr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void CreationExpr() throws ParseException {/*@bgen(jjtree) CreationExpr */
  ASTCreationExpr jjtn000 = new ASTCreationExpr(JJTCREATIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(36);
      NonArrayType();
      label_10:
      while (true) {
        if (jj_2_35(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(19);
        Expr();
        jj_consume_token(20);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void CondAndExpr() throws ParseException {/*@bgen(jjtree) CondAndExpr */
  ASTCondAndExpr jjtn000 = new ASTCondAndExpr(JJTCONDANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualExpr();
      label_11:
      while (true) {
        if (jj_2_36(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(37);
        EqualExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void EqualExpr() throws ParseException {/*@bgen(jjtree) EqualExpr */
  ASTEqualExpr jjtn000 = new ASTEqualExpr(JJTEQUALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelExpr();
      if (jj_2_37(2)) {
        EqualOp();
        RelExpr();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void RelExpr() throws ParseException {/*@bgen(jjtree) RelExpr */
  ASTRelExpr jjtn000 = new ASTRelExpr(JJTRELEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AddExpr();
      if (jj_2_38(2)) {
        RelOp();
        AddExpr();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void AddExpr() throws ParseException {/*@bgen(jjtree) AddExpr */
  ASTAddExpr jjtn000 = new ASTAddExpr(JJTADDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MulExpr();
      label_12:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_12;
        }
        AddOp();
        MulExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MulExpr() throws ParseException {/*@bgen(jjtree) MulExpr */
  ASTMulExpr jjtn000 = new ASTMulExpr(JJTMULEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpr();
      label_13:
      while (true) {
        if (jj_2_40(2)) {
          ;
        } else {
          break label_13;
        }
        MulOp();
        UnaryExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void UnaryExpr() throws ParseException {/*@bgen(jjtree) UnaryExpr */
  ASTUnaryExpr jjtn000 = new ASTUnaryExpr(JJTUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_41(2)) {
        AddOp();
      } else {
        ;
      }
      PrimaryExpr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void PrimaryExpr() throws ParseException {/*@bgen(jjtree) PrimaryExpr */
  ASTPrimaryExpr jjtn000 = new ASTPrimaryExpr(JJTPRIMARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_43(2)) {
        Literal();
      } else if (jj_2_44(2)) {
        jj_consume_token(23);
        Expr();
        jj_consume_token(24);
      } else if (jj_2_45(2)) {
        ProcedureCall();
      } else if (jj_2_46(2)) {
        jj_consume_token(ident);
        if (jj_2_42(2)) {
          Selector();
        } else {
          ;
        }
      } else if (jj_2_47(2)) {
        ArrayLen();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ArrayLen() throws ParseException {/*@bgen(jjtree) ArrayLen */
  ASTArrayLen jjtn000 = new ASTArrayLen(JJTARRAYLEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(38);
      jj_consume_token(ident);
      if (jj_2_48(2)) {
        Selector();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Selector() throws ParseException {/*@bgen(jjtree) Selector */
  ASTSelector jjtn000 = new ASTSelector(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_49(2)) {
        jj_consume_token(19);
        Expr();
        jj_consume_token(20);
      } else if (jj_2_50(2)) {
        jj_consume_token(9);
        jj_consume_token(ident);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_51(2)) {
        Selector();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Literal() throws ParseException {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_52(2)) {
        jj_consume_token(39);
      } else if (jj_2_53(2)) {
        jj_consume_token(40);
      } else if (jj_2_54(2)) {
        jj_consume_token(number);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//_______________END OF EXPRESSIONs____

//__________________OPs_______________
  static final public void RelOp() throws ParseException {/*@bgen(jjtree) RelOp */
  ASTRelOp jjtn000 = new ASTRelOp(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_55(2)) {
        jj_consume_token(41);
      } else if (jj_2_56(2)) {
        jj_consume_token(42);
      } else if (jj_2_57(2)) {
        jj_consume_token(43);
      } else if (jj_2_58(2)) {
        jj_consume_token(44);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void EqualOp() throws ParseException {/*@bgen(jjtree) EqualOp */
  ASTEqualOp jjtn000 = new ASTEqualOp(JJTEQUALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_59(2)) {
        jj_consume_token(45);
      } else if (jj_2_60(2)) {
        jj_consume_token(46);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void AddOp() throws ParseException {/*@bgen(jjtree) AddOp */
  ASTAddOp jjtn000 = new ASTAddOp(JJTADDOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_61(2)) {
        jj_consume_token(47);
      } else if (jj_2_62(2)) {
        jj_consume_token(48);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MulOp() throws ParseException {/*@bgen(jjtree) MulOp */
  ASTMulOp jjtn000 = new ASTMulOp(JJTMULOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_63(2)) {
        jj_consume_token(49);
      } else if (jj_2_64(2)) {
        jj_consume_token(50);
      } else if (jj_2_65(2)) {
        jj_consume_token(51);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_3_54()
 {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_59()) return false;
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    return false;
  }

  static private boolean jj_3_59()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3_56()
 {
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3_50()
 {
    if (jj_scan_token(9)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(22)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_55()) return false;
    jj_scanpos = xsp;
    if (!jj_3_56()) return false;
    jj_scanpos = xsp;
    if (!jj_3_57()) return false;
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_53()
 {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3_55()
 {
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3_45()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_14()) return false;
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(21)) return true;
    return false;
  }

  static private boolean jj_3_52()
 {
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_52()) return false;
    jj_scanpos = xsp;
    if (!jj_3_53()) return false;
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    return false;
  }

  static private boolean jj_3_48()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3_49()
 {
    if (jj_scan_token(19)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_49()) return false;
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_scan_token(23)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_10()) return false;
    jj_scanpos = xsp;
    if (!jj_3_11()) return false;
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(17)) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_43()) return false;
    jj_scanpos = xsp;
    if (!jj_3_44()) return false;
    jj_scanpos = xsp;
    if (!jj_3_45()) return false;
    jj_scanpos = xsp;
    if (!jj_3_46()) return false;
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_41()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_19()) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_5()) return false;
    jj_scanpos = xsp;
    if (!jj_3_6()) return false;
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(19)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(10)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(37)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_scan_token(35)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(36)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_33()) return false;
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_scan_token(32)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_scan_token(14)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(ident)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(27)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(26)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(string)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(14)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3_47()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_19()) return false;
    jj_scanpos = xsp;
    if (!jj_3_20()) return false;
    jj_scanpos = xsp;
    if (!jj_3_21()) return false;
    jj_scanpos = xsp;
    if (!jj_3_22()) return false;
    jj_scanpos = xsp;
    if (!jj_3_23()) return false;
    jj_scanpos = xsp;
    if (!jj_3_24()) return false;
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_65()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_2()) return false;
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    return false;
  }

  static private boolean jj_3_64()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(14)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_63()) return false;
    jj_scanpos = xsp;
    if (!jj_3_64()) return false;
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    return false;
  }

  static private boolean jj_3_63()
 {
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3_58()
 {
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3_62()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3_51()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_19()) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3_46()
 {
    if (jj_scan_token(ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_61()) return false;
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    return false;
  }

  static private boolean jj_3_60()
 {
    if (jj_scan_token(46)) return true;
    return false;
  }

  static private boolean jj_3_61()
 {
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3_57()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[65];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[58];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 58; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 65; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			   case 64: jj_3_65(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
