/* Generated By:JavaCC: Do not edit this line. Parser.java */
package yapl.compiler;
import yapl.interfaces.CompilerError;
import yapl.lib.CompilerMessage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import yapl.symbol.*;
import yapl.lib.*;

/** CA2.3 */
public class Parser implements ParserConstants {

    private static String programName = "";
    private static Symboltable symboltable = new Symboltable();
    private static CodeGen cg = new CodeGen();

  /** Main entry point. */
  public static void main(String args[]) {

        if(args.length < 1){
            System.out.println("Not enough arguments! Please enter file path.");
            return;
        }
        try{
            Parser parser = new Parser(new FileInputStream(args[0]));
            parser.Program();
            CompilerMessage.printOK(programName);
        } catch (ParseException e) {
            CompilerMessage.printError(e, programName);
        } catch(TokenMgrError e) {
            CompilerMessage.printError(e, programName);
        }catch (YAPLException e){
            CompilerMessage.printError(e, programName);
        } catch(Exception e){
            e.printStackTrace();
        }
   }

  static final public void Program() throws ParseException, YAPLException {
        Token t, endIdent;
        symboltable.openScope(true);

        Symbol pp1 = new Symbol(Symbol.PredefinedProcedure, "writeint", 0, 0);
                Symbol pp1p = new Symbol(Symbol.Parameter, "i", 0, 0);

                Symbol pp2 = new Symbol(Symbol.PredefinedProcedure, "writebool", 0, 0);
                Symbol pp2p = new Symbol(Symbol.Parameter, "b", 0, 0);

                Symbol pp3 = new Symbol(Symbol.PredefinedProcedure, "writeln", 0, 0);

                Symbol pp4 = new Symbol(Symbol.PredefinedProcedure, "readint", 0, 0);

                symboltable.addSymbol(pp1);
                symboltable.addSymbol(pp1p);
                symboltable.addSymbol(pp2);
                symboltable.addSymbol(pp2p);
                symboltable.addSymbol(pp3);
                symboltable.addSymbol(pp4);
    jj_consume_token(6);
    t = jj_consume_token(ident);
        symboltable.openScope(true);

        Symbol s = new Symbol(Symbol.Program, t.image, t.beginLine, t.beginColumn);
        symboltable.setParentSymbol(s);
        symboltable.addSymbol(s);
        programName = t.toString();
        symboltable.openScope(true);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 22:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        Decl();
        break;
      case 22:
        Procedure();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(7);
    StatementList();
    jj_consume_token(8);
    endIdent = jj_consume_token(ident);
        if(!programName.equals(endIdent.image)) {if (true) throw new YAPLException("End " + endIdent.image + " does not match program " + programName, CompilerError.EndIdentMismatch, endIdent.beginLine, endIdent.beginColumn);}
        symboltable.closeScope();
        symboltable.closeScope();
    jj_consume_token(9);
    jj_consume_token(0);
  }

//Decls
  static final public void Decl() throws ParseException, YAPLException {
    jj_consume_token(10);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 15:
      case 17:
      case 18:
      case ident:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ConstDecl();
        break;
      case 17:
      case 18:
      case ident:
        VarDecl();
        break;
      case 15:
        TypeDecl();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ConstDecl() throws ParseException, YAPLException {
     Token t;
    jj_consume_token(11);
    t = jj_consume_token(ident);
    jj_consume_token(12);
    Literal();
    jj_consume_token(13);
        Symbol s = new Symbol(Symbol.Constant, t.image, t.beginLine, t.beginColumn);
                    Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.getSymbolFromCurrentScope(t.image);
                    if(checkedSymbol != null) {
                                                {if (true) throw new YAPLException("Identifier '" + t.image + "' already declared in current scope (as " + checkedSymbol.getKindString().toLowerCase() + ")", CompilerError.SymbolExists, t.beginLine, t.beginColumn);}
                    }
                    symboltable.addSymbol((yapl.symbol.Symbol)s);
  }

  static final public void VarDecl() throws ParseException, YAPLException {
    Token t, u;
    Type type;
    type = Type();
    t = jj_consume_token(ident);
                                   Symbol s = new Symbol(Symbol.Variable, t.image, t.beginLine, t.beginColumn);
                                   s.setType(type);
                                   Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.getSymbolFromCurrentScope(t.image);
                                   if(checkedSymbol != null) {if (true) throw new YAPLException("Identifier '" + t.image + "' already declared in current scope (as " + checkedSymbol.getKindString().toLowerCase() + ")", CompilerError.SymbolExists, t.beginLine, t.beginColumn);}
                                   symboltable.addSymbol((yapl.symbol.Symbol)s);
                                   //symbol 'k' already declared in current scope (as variable)

    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(14);
      u = jj_consume_token(ident);
        Symbol v = new Symbol(Symbol.Variable, u.image, u.beginLine, u.beginColumn);
                                Symbol checkedSymbol2 = (yapl.symbol.Symbol)symboltable.lookup(u.image, u.beginLine, u.beginColumn);
                                if(checkedSymbol2 != null) {if (true) throw new YAPLException("Identifier '" + u.image + "' already declared in current scope (as " + checkedSymbol2.getKindString().toLowerCase() + ")", CompilerError.SymbolExists, u.beginLine, u.beginColumn);}
                                symboltable.addSymbol((yapl.symbol.Symbol)v);
    }
    jj_consume_token(13);
  }

  static final public void TypeDecl() throws ParseException, YAPLException {
    Token t;
    jj_consume_token(15);
    t = jj_consume_token(ident);
                 Symbol s = new Symbol(Symbol.Typename, t.image, t.beginLine, t.beginColumn);
                             Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.getSymbolFromCurrentScope(t.image);
                             if(checkedSymbol != null) {if (true) throw new YAPLException("Identifier '" + t.image + "' already declared in current scope (as " + checkedSymbol.getKindString().toLowerCase() + ")", CompilerError.SymbolExists, t.beginLine, t.beginColumn);}
                             System.out.println("Before adding symbol: " + s.getName());
                             symboltable.addSymbol((yapl.symbol.Symbol)s);
                             symboltable.openScope(false);
    VarDecl();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case ident:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      VarDecl();
    }
    jj_consume_token(16);
                                         symboltable.closeScope();
    jj_consume_token(13);
  }

//________________END OF DECs___________

//________________TYPEs_____________
  static final public Type NonArrayType() throws ParseException, YAPLException {
       Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
                {if (true) return new IntegerType();}
      break;
    case 18:
      jj_consume_token(18);
         {if (true) return new BooleanType();}
      break;
    case ident:
      t = jj_consume_token(ident);
                                             Symbol s = new Symbol(t.kind, t.image, t.beginLine, t.beginColumn);
                                             Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.lookup(t.image, t.beginLine, t.beginColumn);
                                             System.out.println("Lookup finished");
                                             if(checkedSymbol == null) {if (true) throw new YAPLException("identifier '" + t.image + "' not declared", CompilerError.IdentNotDecl, t.beginLine, t.beginColumn);}
                                              if(checkedSymbol != null){
                                                  if(checkedSymbol.getKindString() != null){
                                                      if(checkedSymbol.getKind() != Symbol.Typename) {if (true) throw new YAPLException("illegal use of " + checkedSymbol.getKindString().toLowerCase() + " " + checkedSymbol.getName(), CompilerError.SymbolIllegalUse, t.beginLine, t.beginColumn);}
                                                  }
                                              }symboltable.addSymbol(s);
                      {if (true) return new RecordType(t.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException, YAPLException {
       Type type;
    type = NonArrayType();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(19);
      jj_consume_token(20);
    }
     {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ReturnType() throws ParseException, YAPLException {
    Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
            {if (true) return new VoidType();}
      break;
    case 17:
    case 18:
    case ident:
      type = Type();
                                                     {if (true) return type;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//________________END OF TYPEs________

//________________PROCEDUREs__________
  static final public void Procedure() throws ParseException, YAPLException {
            Token t, endIdent;
    jj_consume_token(22);
    ReturnType();
    t = jj_consume_token(ident);
        Symbol s = new Symbol(Symbol.Procedure, t.image, t.beginLine, t.beginColumn);
        symboltable.addSymbol(s);
        symboltable.setParentSymbol(s);
        symboltable.openScope(false);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 18:
    case ident:
      FormalParamList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(24);
    Block();
    endIdent = jj_consume_token(ident);
    jj_consume_token(13);
        if(!t.image.equals(endIdent.image)) {if (true) throw new YAPLException("End " + endIdent.image + " does not match procedure " + t.image, CompilerError.EndIdentMismatch, endIdent.beginLine, endIdent.beginColumn);}
        symboltable.closeScope();
  }

  static final public void FormalParamList() throws ParseException, YAPLException {
     System.out.println("Formal Paramlist incoming");
    FormalParam();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(14);
      FormalParam();
    }
  }

  static final public void FormalParam() throws ParseException, YAPLException {
    Token t;
    Type type;
    type = Type();
    t = jj_consume_token(ident);
                Symbol s = new Symbol(Symbol.Parameter, t.image, t.beginLine, t.beginColumn);
                s.setType(type);
                symboltable.addSymbol((yapl.symbol.Symbol)s);
  }

//________________END OF PROCEDUREs____

//________________STATEMENTs___________
  static final public void StatementList() throws ParseException, YAPLException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 10:
      case 25:
      case 26:
      case 27:
      case 30:
      case ident:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      Statement();
      jj_consume_token(13);
    }
  }

  static final public void Statement() throws ParseException, YAPLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      IfStatement();
      break;
    case 27:
      WhileStatement();
      break;
    case 26:
      ReturnStatement();
      break;
    case 25:
      WriteStatement();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_1(2)) {
        Assignment();
      } else if (jj_2_2(2)) {
        ProcedureCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
        case 10:
          Block();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void WriteStatement() throws ParseException, YAPLException {
    jj_consume_token(25);
    jj_consume_token(string);
  }

  static final public void ReturnStatement() throws ParseException, YAPLException {
    jj_consume_token(26);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 36:
    case 38:
    case 39:
    case 40:
    case 47:
    case 48:
    case ident:
    case number:
      Expr();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void WhileStatement() throws ParseException, YAPLException {
    jj_consume_token(27);
    Expr();
    jj_consume_token(28);
    StatementList();
    jj_consume_token(29);
  }

  static final public void IfStatement() throws ParseException, YAPLException {
    jj_consume_token(30);
    Expr();
    jj_consume_token(31);
    StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      StatementList();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(33);
  }

  static final public void Assignment() throws ParseException, YAPLException {
    Token t;
    t = jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 19:
      Selector();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(34);
    Expr();
        Symbol s = new Symbol(t.kind, t.image, t.beginLine, t.beginColumn);
        Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.lookup(t.image, t.beginLine, t.beginColumn);
        //symbol 'k' already declared in current scope (as variable)
        if(checkedSymbol == null) {if (true) throw new YAPLException("identifier '" + t.image + "' not declared", CompilerError.IdentNotDecl, t.beginLine, t.beginColumn);}
        if(checkedSymbol.getKind() == (Symbol.Constant)) {if (true) throw new YAPLException("illegal use of " + checkedSymbol.getKindString().toLowerCase() + " " + checkedSymbol.getName(), CompilerError.SymbolIllegalUse, t.beginLine, t.beginColumn);}
        symboltable.addSymbol(s);
  }

  static final public void ProcedureCall() throws ParseException, YAPLException {
    Token t;
    t = jj_consume_token(ident);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 36:
    case 38:
    case 39:
    case 40:
    case 47:
    case 48:
    case ident:
    case number:
      ArgumentList();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(24);
            Symbol s = new Symbol(t.kind, t.image, t.beginLine, t.beginColumn);
            Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.lookup(t.image, t.beginLine, t.beginColumn);
            //symbol 'k' already declared in current scope (as variable)
            if(checkedSymbol == null) {if (true) throw new YAPLException("identifier '" + t.image + "' not declared", CompilerError.IdentNotDecl, t.beginLine, t.beginColumn);}
            if(!(checkedSymbol.getKind() == Symbol.Procedure || checkedSymbol.getKind() == Symbol.PredefinedProcedure)) {if (true) throw new YAPLException("illegal use of " + checkedSymbol.getKindString().toLowerCase() + " " + checkedSymbol.getName(), CompilerError.SymbolIllegalUse, t.beginLine, t.beginColumn);}
            //symboltable.addSymbol(s);

  }

  static final public void ArgumentList() throws ParseException, YAPLException {
    Expr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(14);
      Expr();
    }
  }

  static final public void Block() throws ParseException, YAPLException {
     symboltable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      Decl();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(7);
    StatementList();
    jj_consume_token(8);
     symboltable.closeScope();
  }

//________________END OF STATEMENTs_____

//_______________EXPRESSIONs________
  static final public Attrib Expr() throws ParseException, YAPLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 38:
    case 39:
    case 40:
    case 47:
    case 48:
    case ident:
    case number:
      CondAndExpr();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        jj_consume_token(35);
        CondAndExpr();
      }
      break;
    case 36:
      CreationExpr();
        {if (true) return new Attrib();}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attrib CreationExpr() throws ParseException, YAPLException {
        Type type;
    jj_consume_token(36);
    type = NonArrayType();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      jj_consume_token(19);
      Expr();
      jj_consume_token(20);
    }
     {if (true) return new Attrib();}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib CondAndExpr() throws ParseException, YAPLException {
    Attrib expr1, expr2;
    Token operator;
    expr1 = EqualExpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      jj_consume_token(37);
      expr2 = EqualExpr();
        operator = new Token();
        operator.image = "And";
        {if (true) return cg.op2(expr1, token, expr2);}
    }
     {if (true) return expr1;}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib EqualExpr() throws ParseException, YAPLException {
    Attrib expr1, expr2;
    Token operator;
    expr1 = RelExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
      operator = EqualOp();
      expr2 = RelExpr();
        {if (true) return cg.equalOp(expr1, operator, expr2);}
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
     {if (true) return expr1;}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib RelExpr() throws ParseException, YAPLException {
    Attrib expr1, expr2;
    Token operator;
    expr1 = AddExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
    case 42:
    case 43:
    case 44:
      operator = RelOp();
      expr2 = AddExpr();
        {if (true) return cg.relOp(expr1, operator, expr2);}
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
     {if (true) return expr1;}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib AddExpr() throws ParseException, YAPLException {
    Attrib expr1, expr2;
    Token operator;
    expr1 = MulExpr();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      operator = AddOp();
      expr2 = MulExpr();
        {if (true) return cg.op2(expr1, operator, expr2);}
    }
     {if (true) return expr1;}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib MulExpr() throws ParseException, YAPLException {
    Attrib expr1, expr2;
    Token operator;
    expr1 = UnaryExpr();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 50:
      case 51:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      operator = MulOp();
      expr2 = UnaryExpr();
        {if (true) return cg.op2(expr1, operator, expr2);}
    }
     {if (true) return expr1;}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib UnaryExpr() throws ParseException, YAPLException {
   Attrib expr;
   Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
      operator = AddOp();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    expr = PrimaryExpr();
        {if (true) return cg.op1(operator, expr);}
    throw new Error("Missing return statement in function");
  }

  static final public Attrib PrimaryExpr() throws ParseException, YAPLException {
  Token t;
  Attrib attrib = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
    case number:
      attrib = Literal();
                        {if (true) return attrib;}
      break;
    case 23:
      jj_consume_token(23);
      attrib = Expr();
                                                               {if (true) return attrib;}
      jj_consume_token(24);
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_3(2)) {
        ProcedureCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          t = jj_consume_token(ident);
                Symbol s = new Symbol(t.kind, t.image, t.beginLine, t.beginColumn);

                Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.lookup(t.image, t.beginLine, t.beginColumn);
                if(checkedSymbol == null) {if (true) throw new YAPLException("identifier '" + t.image + "' not declared", CompilerError.IdentNotDecl, t.beginLine, t.beginColumn);}
                System.out.println("Symbol to check: " + t.image + " of kind: " + t.kind);
                System.out.println("Checked symbol: " + checkedSymbol.getName());
                if(checkedSymbol.getKindString() != null){
                    if(!(checkedSymbol.getKind() == Symbol.Variable || checkedSymbol.getKind() == Symbol.Constant || checkedSymbol.getKind() == Symbol.Parameter)) {if (true) throw new YAPLException("illegal use of " + checkedSymbol.getKindString().toLowerCase() + " '" + checkedSymbol.getName() + "'", CompilerError.SymbolIllegalUse, t.beginLine, t.beginColumn);}
                }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 9:
          case 19:
            Selector();
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case 38:
          ArrayLen();
        {if (true) return attrib;}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ArrayLen() throws ParseException, YAPLException {
Token t;
    jj_consume_token(38);
    t = jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 19:
      Selector();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                Symbol s = new Symbol(t.kind, t.image, t.beginLine, t.beginColumn);
                System.out.println("Kind: " + t.kind);
                Symbol checkedSymbol = (yapl.symbol.Symbol)symboltable.lookup(t.image, t.beginLine, t.beginColumn);
                if(checkedSymbol == null) {if (true) throw new YAPLException("identifier '" + t.image + "' not declared", CompilerError.IdentNotDecl, t.beginLine, t.beginColumn);}
                if(checkedSymbol.getKind() == (Symbol.Constant) || checkedSymbol.getKind() == (Symbol.Procedure)) {if (true) throw new YAPLException("illegal use of " + checkedSymbol.getKindString().toLowerCase() + " " + checkedSymbol.getName(), CompilerError.SymbolIllegalUse, t.beginLine, t.beginColumn);}
  }

  static final public void Selector() throws ParseException, YAPLException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      Expr();
      jj_consume_token(20);
      break;
    case 9:
      jj_consume_token(9);
      jj_consume_token(ident);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 19:
      Selector();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  static final public Attrib Literal() throws ParseException, YAPLException {
       Attrib attrib;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
            {if (true) return new Attrib(new BooleanType());}
      break;
    case 40:
      jj_consume_token(40);
                                                              {if (true) return new Attrib(new BooleanType());}
      break;
    case number:
      jj_consume_token(number);
                                                                                                                 {if (true) return new Attrib(new IntegerType());}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//_______________END OF EXPRESSIONs____

//__________________OPs_______________
  static final public Token RelOp() throws ParseException, YAPLException {
            Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      token = jj_consume_token(41);
      break;
    case 42:
      token = jj_consume_token(42);
      break;
    case 43:
      token = jj_consume_token(43);
      break;
    case 44:
      token = jj_consume_token(44);
            {if (true) return token;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token EqualOp() throws ParseException, YAPLException {
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      token = jj_consume_token(45);
      break;
    case 46:
      token = jj_consume_token(46);
        {if (true) return token;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token AddOp() throws ParseException, YAPLException {
            Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      token = jj_consume_token(47);
      break;
    case 48:
      token = jj_consume_token(48);
            {if (true) return token;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token MulOp() throws ParseException, YAPLException {
            Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      token = jj_consume_token(49);
      break;
    case 50:
      token = jj_consume_token(50);
      break;
    case 51:
      token = jj_consume_token(51);
            {if (true) return token;}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ident)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400400,0x400400,0x68800,0x68800,0x4000,0x60000,0x60000,0x80000,0x260000,0x60000,0x4000,0x4e000480,0x4e000000,0x480,0x800000,0x0,0x80200,0x800000,0x4000,0x400,0x0,0x800000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x80200,0x800000,0x0,0x80200,0x80200,0x80200,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x0,0x100000,0x0,0x0,0x3181d0,0x1,0x0,0x3181d0,0x0,0x0,0x8,0x3181d0,0x0,0x20,0x6000,0x1e00,0x18000,0xe0000,0x18000,0x0,0x200180,0x100040,0x0,0x0,0x0,0x200180,0x1e00,0x6000,0x18000,0xe0000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
