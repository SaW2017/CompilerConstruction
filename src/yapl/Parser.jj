/*options {
    MULTI=true;
    TRACK_TOKENS=true;
}*/

PARSER_BEGIN(Parser)
package yapl.compiler;
//import yapl.lib.*;
import yapl.interfaces.*;


public class Parser {

}


PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


SPECIAL_TOKEN : /* COMMENTS */
{
 <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


Token RelOp():
{Token t;}
{
 (t = "<=" | t = ">=" | t = ">" | t ="<")
 {return t;}
}
Token EqualOp():
{Token t;}
{
(t = "==" | t = "!=")
{return t;}
}
Token AddOp():
{Token t;}
{
(t = "+" | t = "-")
{return t;}
}
Token MulOp():
{Token t;}
{
(t = "*" | t = "/" | t = "%")
{jjtThis.jjtSetFirstToken(t);
return t;}
}
void Literal():
{
     Token t;
}
{
("True" { jjtThis.intValue = 1; jjtThis.type = new BoolType(); } | "False" { jjtThis.intValue = 0; jjtThis.type = new BoolType(); }) | t = <number> { jjtThis.intValue = Integer.parseInt(t.image); jjtThis.type = new IntType(); }
}

void Selector():
{
     Token t;
}
{
( "[" Expr() "]" | "."t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(2);} ) [ Selector() ]
}

void ArrayLen():
{
    Token t;
}
{
"#" t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(2);} [ Selector() ]
}

void PrimaryExpr():
{}
{
 Literal() | "(" Expr() ")" | B() | ArrayLen()
}

void UnaryExpr():
{Token t=null;}
{
[t = AddOp()] PrimaryExpr()
{jjtThis.jjtSetFirstToken(t);}
}

void MulExpr():
{Token t=null;}
{
 UnaryExpr() ( t = MulOp() UnaryExpr() )*
 {jjtThis.jjtSetFirstToken(t);}
}

void AddExpr():
{Token t=null;}
{
MulExpr() ( t = AddOp() MulExpr() )*
{jjtThis.jjtSetFirstToken(t);}
}

void RelExpr():
{Token t=null;}
{
AddExpr() [ t = RelOp() AddExpr() ]
{jjtThis.jjtSetFirstToken(t);}
}

void EqualExpr():
{Token t=null;}
{
 RelExpr() [ t = EqualOp() RelExpr() ]
 {jjtThis.jjtSetFirstToken(t);}
}

void CondAndExpr():
{Token t=null;}
{
EqualExpr() ( t = "And" EqualExpr() )*
{jjtThis.jjtSetFirstToken(t);}
}

void CreationExpr():
{Token t=null;}
{
"new" NonArrayType() ( t = "[" Expr() "]" {jjtThis.tokens.add(t);})*
}

void Expr():
{Token t=null;}
{
CondAndExpr() ( t = "Or" {jjtThis.jjtSetFirstToken(t);}CondAndExpr() )* | CreationExpr()
}

void ArgumentList():
{}
{
Expr() ( "," Expr() )*
}

void ProcedureCall():
{}
{
 "(" ( ArgumentList() )? ")"
}

void Assignment():
{}
{
( Selector() )? ":=" Expr()
}

void IfStatement():
{}
{
"If" Expr() "Then" StatementList() ( "Else" StatementList() )? "EndIf"
}

void WhileStatement():
{}
{
"While" Expr() "Do" StatementList() "EndWhile"
}

void ReturnStatement():
{}
{
"Return" ( Expr() )?
}

void WriteStatement():
{
Token t;
}
{
"Write" t = <string>
}

void Statement():
{}
{
 IfStatement() | WhileStatement() | ReturnStatement()
                | WriteStatement() | A() | Block()
}

void StatementList():
{}
{
( Statement() ";" )*
}

void Block():
{}
{
( Decl() )? "Begin" StatementList() "End"
}

void NonArrayType():
{
    Token t=null;
}
{
    "int" | "bool" |t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(4);}
}

void Type():
{Token t=null;}
{
 NonArrayType() ( t = "[" "]" {jjtThis.tokens.add(t);})*
}

void ReturnType():
{}
{
"void" { jjtThis.type = new VoidType(); } | Type()
}

void ConstDecl():
{
    Token t;
}
{
"Const"t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(3);}"=" Literal() ";"
}

void VarDeclChild():
{
    Token t;
}
{
     t =  <ident> { jjtThis.setIdent(t.image);jjtThis.setKind(6); }
}

void VarDecl():
{
    Token t;
}
{
 Type() t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(6); jjtThis.setName(t.image); } ( "," VarDeclChild())* ";"
}

void TypeDecl():
{
    Token t;
}
{
"Record" t = <ident> { jjtThis.setIdent(t.image);jjtThis.setKind(4);} VarDecl() ( VarDecl() )* "EndRecord" ";"
}
void Decl():
{}
{
"Declare" ( ConstDecl() | VarDecl() | TypeDecl() )*
}

void FormalParam():
{
    Token t;
}
{
Type() t = <ident> { jjtThis.setIdent(t.image);jjtThis.setKind(6);}
}

void FormalParamList():
{}
{
FormalParam() ( "," FormalParam() )*
}

void Procedure():
{Token t;}
{
"Procedure" ReturnType() t = <ident> { jjtThis.setIdent(t.image); jjtThis.setKind(1); jjtThis.setName(t.image);}
    "(" ( FormalParamList() )? ")" Block() ProcedureEnd(t.image)
}

ASTProcedureEnd ProcedureEnd(String procedureName):
{
    Token t;
}
{
    t = <ident> { jjtThis.setName(t.image); jjtThis.setProcedureName(procedureName); } ";"
    {
        return jjtThis;
    }
}

ASTProgram Program():
{
    Token t;
}
{
"Program" t = <ident> { jjtThis.setName(t.image);  jjtThis.setIdent(t.image); jjtThis.setKind(0);} ( Decl() | Procedure() )*
          "Begin" StatementList() "End" End(t.image)
    {
        return jjtThis;
    }
}

ASTEnd End(String program):
{
    Token t;
}
{
    t = <ident> { jjtThis.setName(t.image); jjtThis.setProgramName(program);} "." <EOF>
    {
        return jjtThis;
    }
}


void A():
{
    Token t;
}
{
    t = <ident> { jjtThis.setIdent(t.image); jjtThis.setName(t.image); jjtThis.setKind(3);} (Assignment() | ProcedureCall())
}

void B():
{
    Token t;
}
{
 t = <ident> { jjtThis.setIdent(t.image); jjtThis.setName(t.image);}(ProcedureCall() |  [ Selector() ])
}

TOKEN : /* LITERALS */
{

    <ident: <letter> ( <letter> | <digit> )*>
|
    <number: <digit> ( <digit> )*>
|
    <string:"\"" ( " " | <letter> | <digit> | <otherchar> )* "\"">
|
     <digit: ["0"-"9"] >
|
    <letter: ["A"-"Z"]|["a"-"z"]|"_">
|
    <otherchar:"+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!"
                         | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")"
                         | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|"|">="|"=="|"<="|"!=">
}

ASTPredefinedProcedures PredefinedProcedures() throws YAPLException:
{
}
{
     (ProcedureHead() )*
      <EOF>
      {
              return jjtThis;
          }
}

void ProcedureHead():
{Token t;}
{
"Procedure" ReturnType() t = <ident> { jjtThis.setIdent(t.image); } "(" ( FormalParamList() )? ")" ";"
}